
apiVersion: v1
kind: ServiceAccount
metadata:
  name: devices-account
  namespace: devices
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: devices-role
rules:

  # Framework: knowing which other operators are running (i.e. peering).
  - apiGroups: ["*"]
    resources: ["*"]
    verbs: ["*"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: devices-rolebinding-cluster
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: devices-role
subjects:
  - kind: ServiceAccount
    name: devices-account
    namespace: devices

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: iff-onboarding-controller
  labels:
    app: iff-onboarding-controller
spec:
  replicas: 1
  selector:
    matchLabels:
      app: iff-onboarding-controller
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: iff-onboarding-controller
    spec:
      serviceAccountName: devices-account
      restartPolicy: Always
      containers:
        - name: iff-onboarding-controller
          image: {{ .Values.controller.image }}
          imagePullPolicy: Always
          securityContext:
            privileged: true
          env:
          - name: FACTORY_MONGO_URL
            valueFrom:
              secretKeyRef:
                name: factory-mongo-secret
                key: factoryMongoDbUrl
          - name: FACTORY_MONGO_DB_NAME
            value: {{ .Values.controller.factoryMongoDbName }}
          - name: DEVICE_IFRIC_ID
            value: {{ .Values.controller.deviceIfricId }}
      imagePullSecrets:
        - name: regcred

---
apiVersion: v1
kind: Secret
metadata:
  name: factory-mongo-secret
type: Opaque
data:
  factoryMongoDbUrl: {{ .Values.controller.factoryMongoDbUrl }}

---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: mongoinserts.myorg.io
spec:
  group: myorg.io
  names:
    kind: MongoInsert
    plural: mongoinserts
    singular: mongoinsert
  scope: Namespaced
  versions:
    - name: v1
      served: true
      storage: true
      schema:
        openAPIV3Schema:
          type: object
          properties:
            spec:
              type: object
              properties:
                db:
                  type: string
                collection:
                  type: string
                document:
                  type: string


---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: mqtt-broker
  labels:
    app: mqtt-broker
  namespace: {{ .Values.namespace }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mqtt-broker
  template:
    metadata:
      labels:
        app: mqtt-broker
    spec:
      affinity: {}
      containers:
      - image: eclipse-mosquitto
        imagePullPolicy: IfNotPresent
        name: mqtt
        ports:
        - containerPort: 1883
          hostPort: 1883
        volumeMounts:
        - mountPath: /mosquitto/config/mosquitto.conf
          name: conf
          subPath: mosquitto.conf
      volumes:
      - name: conf
        configMap:
          name: mqtt-broker-config
          items:
          - key: mosquitto.conf
            path: mosquitto.conf

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: mqtt-broker-config
data:
  mosquitto.conf: |
    listener 1883
    connection_messages true
    allow_anonymous true

---

apiVersion: v1
kind: Service
metadata:
  name: mqtt-broker-service
  namespace: {{ .Values.namespace }}
spec:
  type: LoadBalancer
  selector:
    app: mqtt-broker
  ports:
    - protocol: TCP
      port: 1883
      targetPort: 1883